tailwind intelisense -> 확장프로그램 설치(자동완성)
modifier -> 
peer modifier -> input의 상태에 따라서 span의 스타일을 변화시킬 수 있다.

HTML - <detail> -> 아코디언 기능 만들 수 있음.
  <summary>What is my fav. food</summary>
  <div>김치</div>
</detail>

보통 디자인을 할 때 Desktop -> 모바일로 하는데, tailwind는 디폴트로 모바일 -> Desktop으로 하게끔 디자인 방식을 바꿔버렸다.
modifier - bg-white-400 sm:bg-gray-400 md:bg-yellow-400 lg:bg-red-400 ... 이 modifier는 from의 개념으로 생각하면 됨. 

다크모드를 지원할 경우 -> tailwind.config.js의 darkMode의 디폴트(사용저 브라우저 환경에 맡김)는 media, 수동으로 하겠다-> class(변경하고자 하는 곳의 부모의 className에 dark를 삽입.)

tailwind 3.0 이전 -> 겁나 큰 파일
이후 -> Just In Time 컴파일러 (실시간으로 코드를 감시하면서 그때그때 필요한 클래스를 생성.)
text-[93432px] (만약 tailwind에 원하는 사이즈가 없다? 대괄호로 변수처럼 사용) 3.0이전에는 style={{}}을 따로 만들어서 정의했음.

배경화면 쓸 때, bg-[url('/vercel.svg')] 이런 식으로 가능

아이콘: svg파일 -> https://heroicons.dev

Prisma 란?
ORM(Object Relational mapping)의 일종.
SQL의 데이터조작 로직을 JS 객체 느낌으로 다룰수있게 도와준다.

foreign key -> 다른 db의 key의 주소를 바라보고 있음.
ex) Users DB: id: 1 username: SJ
Comments DB: id:1 text:wow! user:(Users DB: 1) => (Users DB: 1)는? id: 1 username: SJ 이거 전체를 가리킴.

npx prisma studio -> 프리즈마 스튜디오를 열게 해줌. (나의 경우 5555 포트가 사용되고 있어서 에러가 났는데, cmd에서 netstat -ano | findstr 포트번호 입력해서 PID값을 찾고, 작업관리자>서비스에서 해당 PID를 kill하고 돌리니 해결되었다.)
npx prisma db push -> .env에 있는 db 주소로 내가 만든 Model을 테이블로 만들어줌. (Serverless Db를 Supabase로 가져갔고. 보안상 로컬용으로 도커를 이용해서 로컬 supabase를 켜고(npx supabase start) 이를 이용.)
npx prisma generate -> prisma/schema.prisma에 있는 Model을 바탕으로 node_modules/@prisma/client/index.d.ts에 해당 Model의 타입을 직접 작성해줌.

-- api Route
pages폴더 내부에 api라는 폴더를 생성(혹은 그냥 있거나). 그 안에서 백엔드에서 작업할 수 있는 것들을 할 수 있음.
ex) localhost:3000/api/client-test 하면 res.json({test: 'test'}) 이런식으로 보낸걸 확인할 수 있음.
- 프론트에서 헤더를 설정 (JSON으로 보내고 싶은 경우) {headers: {'Content-Type': 'application/json'}}
  해야 백엔드에서 객체로 받을 수 있음. Default는 'text/plain;charset=UTF-8'임.
  만약 {"email":"test@gmail.com"} 이걸 보냈다면 이것의 타입은 String임.

- Mutation은 데이터를 변경하기 위해 사용되는 요청.
  일반적으로 데이터를 생성(create), 업데이트(update), 삭제(delete)하는 작업에 사용.



* React-Hook-from
<form>을 작성할 때, input의 태그에 name, onchange ref.. 기타 등등을 한번에 해결할 수 있는
const {register} = useForm();
// console.log(register('user')); // {name: 'name', onChange: ƒ, onBlur: ƒ, ref: ƒ}
return <input {...register("username")} type='text' placeholder='username' />
이런 식으로 스프레드 연산자로 속성 값을 넣어 줄 수 있다.

watch => register가 있는 부분이 변화하면 리랜더링이 일어날 때마다 감시함.
handleSubmit(onValid, onInvalid) 유효한지, 유효하지 않은지 받음.
    {...register(_, {
    require: '여기에 사용자에게 보내질 메세지를 적을 수 있음.',
    minLength: 5 // 이러면 onInvalid(errors)의 errors.type으로 무슨 종류의 유효성 검사에서 걸렸는지
    // 확인 가능함.
  })
}

## 로그인 로직
1. Phone Num sended to Backend --> DB에서 조회 후 User ? 로그인 : 가입
2. Token 발급 -- Connect to User with RandomNumber;
3. Enter Phone Number(Twilio 플랫폼) --> User receive Token(RandomNumber) by SMS.
4. Enter Token --> Send Token to Backend --> Token && Log the user in.

## Cookies안에 세션. pwd -> 암호화(encrypto) -> 복호화(decrypto) -> 확인
iron session
장점: 세션을 위한 백엔드를 따로 구축할 필요가 없다.
데이터를 저장하기 위해 서명되고 암호화된 쿠키를 사용하는 Node.js stateless session 유틸리티.
Next.js, Express, Nest.js, Fastify 및 모든 Node.js HTTP 프레임워크와 함께 작동합니다. 
세션 데이터는 암호화된 쿠키("seals")에 저장됩니다.
그리고 당신의 서버만이 세션 데이터를 디코딩(decode)할 수 있습니다.
세션 ID가 없으므로 서버 관점에서 iron session을 "stateless"로 만듭니다.

# Next-auth.js (쉽게 만드는 인증 서비스)
https://next-auth.js.org/getting-started/example

# SWR (fetch 대신에 쓰는 라이브러리)
super_cache = {
  [url_key]: {
    ...data // ok: true, profile: {id: 9, phone: 01012341234, email: null, ...}
  }
}
이렇게 자체적으로 캐싱이 되는 객체를 지니고 있어 각 url마다 DATA를 기억하고 해당 URL을 호출하면
바로 data를 보여줌. (따라서 Loading 중일 때 undefined가 뜨지 않음.)
Network탭을 보면 GET요청을 하고 있음.

# Seeding your database
시딩을 사용하면 데이터베이스에서 동일한 데이터를 일관되게 다시 생성할 수 있으며 다음을 수행할 수 있습니다.
1. 애플리케이션을 시작하는 데 필요한 데이터(예: 기본 언어 또는 기본 통화)로 데이터베이스를 채웁니다.
2. 개발 환경에서 애플리케이션을 검증하고 사용하기 위한 기본 데이터를 제공합니다.

npm install -D ts-node

데이터베이스를 시드하려면 db seed CLI 명령을 실행하십시오.
npx prisma db seed
```
// package.json
"prisma": {
"seed": "ts-node --compiler-options {\"module\":\"CommonJS\"} prisma/seed.ts"
},

# File Upload
1. File (browser) ---->[Bandwidth Cost] Our Server ----> [Bandwidth Cost] CloudFlare
2. File (browser) [API Token] ----> CloudFlare
3. Direct Creator Upload : (프론트에서 GET, 백에서 POST 그 이유는? URL에 아이디가 노출, headers: Authorization에 토큰이 노출됨으로 백엔드에서 구현해야 함.)
  I have a file! ----> the user has a file ----> CloudFlare give a URL to empty file
  ----> I take it and give an empty file URL to user. (일회용 토큰을 주고 사용자가 쓰지 않으면 30분 내에 사라짐.)

  Q. Next.js에 public 폴더를 넣어서 여기에 이미지를 관리하지 않는 이유는?
  A. We should not save user files in the public folder of NextJS because when we deploy a new version of our code they will be lost.

# Next Image를 써야하는 이유.
  1. Lazy Loading: 사용자가 보고있는 부분의 이미지만을 다운로드하고 스크롤하면 그제서야 다운로드 함. (페이지에 부담을 줄여주고 UX 개선)
  2. 로딩중에(인터넷 속도가 느린 경우) 블러 처리한 이미지를 placeholder로 보여줘서 이 또한 UX 개선. (스켈레톤 UI와 비슷)
  but, API로 보내지는 IMG는 블러처리를 못함. 데이터가 도착하기 전에 IMG에 대해서 전혀 모르기 때문. (블러처리 가능한 이미지는 로컬 이미지.)
  
  Remote Image(URL_API)로 보낼 때: 
    1. Next.js는 URL의 Host_name을 알고싶어함. -> next.config.js에 images: { domains: ["imagedelivery.net"] } 을 추가해줌.
    2. width, height OR layout='fill' 프로퍼티를 전달해줘야함. (lazy loading을 지원하기 위한 정보 제공)